setwd("~/Documents/GitRepos/CNH-perspectives")
grants<- read.csv('Grants_toTrack.csv')
pubs<- read.csv('PublicationTracker_0422.csv')
journals <- read.csv('SubsetJournals_11Jun20.csv')
grants<- read.csv('Grants_toTrack.xlsx')
View(grants)
grants<- read.csv('Grants_toTrack.csv')
grant_sum<-grants %>% group_by(Grant.Searched) %>% summarize(count=n())
ggplot(grants)+
geom_bar(aes(x=Grant.Searched)) # this should be re-done to show as a percentage of grants in the dimensions results (with dates 2000-2015 - I orginially had done this manually, but we should probably write another script to do this and remove duplicate titles from Collaborative proposals)
pubs$Journal<-as.character(pubs$Journal)
pubs$Journal<-char_tolower(pubs$Journal)
pub_sum<- pubs %>% group_by(Journal) %>% summarize(count=n())
rub_sum<- pubs %>% group_by(Rubric1_OG) %>% summarize(count=n())
rub_sum_v2<- pubs %>% group_by(Rubric2) %>% summarize(count=n())
grant_ids <- unique(pubs$Grant.Number)
grant_deets <- data.frame('Grant.Number'=grant_ids, 'sdi'=-1)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(quanteda)
library(ggplot2)
#packages for word cloud
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(RCurl)
library(XML)
library(vegan)
grants<- read.csv('Grants_toTrack.csv')
pubs<- read.csv('PublicationTracker_0422.csv')
journals <- read.csv('SubsetJournals_11Jun20.csv')
grant_sum<-grants %>% group_by(Grant.Searched) %>% summarize(count=n())
ggplot(grants)+
geom_bar(aes(x=Grant.Searched)) # this should be re-done to show as a percentage of grants in the dimensions results (with dates 2000-2015 - I orginially had done this manually, but we should probably write another script to do this and remove duplicate titles from Collaborative proposals)
pubs$Journal<-as.character(pubs$Journal)
pubs$Journal<-char_tolower(pubs$Journal)
pub_sum<- pubs %>% group_by(Journal) %>% summarize(count=n())
rub_sum<- pubs %>% group_by(Rubric1_OG) %>% summarize(count=n())
rub_sum_v2<- pubs %>% group_by(Rubric2) %>% summarize(count=n())
grant_ids <- unique(pubs$Grant.Number)
grant_deets <- data.frame('Grant.Number'=grant_ids, 'sdi'=-1)
for (i in 1:length(grant_ids)) {
if (length(pubs$Publication.Year[pubs$Grant.Number == grant_ids[i]]) > 2){
sdi <- diversity(pubs$Rubric2[pubs$Grant.Number == grant_ids[i]], index="shannon")
} else {sdi = NA}
grant_deets$sdi[i] <- sdi
}
for (i in 1:length(grant_ids)) {
if (length(pubs$Publication.Year[pubs$Grant.Number == grant_ids[i]]) > 2){
sdi <- diversity(pubs$Rubric2[pubs$Grant.Number == grant_ids[i]], index="shannon")
} else {sdi = NA}
grant_deets$sdi[i] <- sdi
}
# bar color = CHANS
ggplot(journals, aes(x = reorder(journal, -number.of.papers), y = number.of.papers, fill = Mission.includes.humans.social.)) +
geom_bar(stat = "identity")
# bar color = interdisciplinary
ggplot(journals, aes(x = reorder(journal, -number.of.papers), y = number.of.papers, fill = Mission.includes.interdisciplinary.)) +
geom_bar(stat = "identity")
library(dplyr)
library(tidyverse)
library(quanteda)
library(ggplot2)
#packages for word cloud
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(RCurl)
library(XML)
library(vegan)
grants<- read.csv('Grants_toTrack.csv')
View(grants)
library(ggmosaic)
ggplot(data = grants) +
geom_mosaic(aes(weight = Grant.Searched, x = Number.of.Papers, fill=factor(Number.of.Papers)), na.rm=TRUE) +
labs(x="Hours of sleep a night ", title='f(SleepHrsNight)') + guides(fill=guide_legend(title = "SleepHrsNight", reverse = TRUE))
ggplot(data = grants) +
geom_mosaic(aes(weight = Grant.Searched, x = Number.of.Papers, fill=factor(Number.of.Papers)), na.rm=TRUE) +
labs(x="Hours of sleep a night ", title='f(SleepHrsNight)') + guides(fill=guide_legend(title = "SleepHrsNight", reverse = TRUE))
ggplot(data = grants) +
geom_mosaic(aes(weight = Grant.Searched, x = grants$Number.of.Papers, fill=factor(Number.of.Papers)), na.rm=TRUE) +
labs(x="Hours of sleep a night ", title='f(SleepHrsNight)') + guides(fill=guide_legend(title = "SleepHrsNight", reverse = TRUE))
ggplot(data = grants) +
geom_mosaic(aes(weight =  Grant.Searched, x = product(Number.of.Papers), fill=factor(Number.of.Papers)), na.rm=TRUE) +
labs(x="Hours of sleep a night ", title='f(SleepHrsNight)') + guides(fill=guide_legend(title = "SleepHrsNight", reverse = TRUE))
grants$Number.of.Papers <- as.numeric(grants$Number.of.Papers)
ggplot(data = grants) +
geom_mosaic(aes(weight =  Grant.Searched, x = product(Number.of.Papers), fill=factor(Number.of.Papers)), na.rm=TRUE) +
labs(x="Hours of sleep a night ", title='f(SleepHrsNight)') + guides(fill=guide_legend(title = "SleepHrsNight", reverse = TRUE))
ggplot(grants,
aes(x = Grant.Searched, y = Number.of.Papers, width = Number.of.Papers, fill = Number.of.Papers)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
ggplot(grants,
aes(x = cut, y = Number.of.Papers, width = Number.of.Papers, fill = Number.of.Papers)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
df <- diamonds %>%
group_by(cut, clarity) %>%
summarise(count = n()) %>%
mutate(cut.count = sum(count),
prop = count/sum(count)) %>%
ungroup()
ggplot(df,
aes(x = cut, y = prop, width = cut.count, fill = clarity)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
View(grants)
View(df)
View(grants)
ggplot(grants,
aes(x = Grant.Searched, y = count(), width = Number.of.Papers, fill = Number.of.Papers)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
ggplot(grants,
aes(x = Grant.Searched, y = Number.of.Papers, width = Number.of.Papers, fill = Number.of.Papers)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
df <- grants %>%
group_by(Grant.Searched) %>%
summarise(count = n(), numberpaper = sum(Number.of.Papers))
View(df)
df <- grants %>%
group_by(Grant.Searched) %>%
summarise(count = n(), numberpaper = sum(Number.of.Papers)) %>%
mutate(cut.count = sum(count),
prop = count/sum(count), paper.count = sum(Number.of.Papers),
prop.count = paper.count/sum(Number.of.Papers))
View(df)
df <- grants %>%
group_by(Grant.Searched) %>%
summarise(count = n(), numberpaper = sum(Number.of.Papers),
prop = count/sum(count), prop.count = paper.count/sum(Number.of.Papers))
df <- grants %>%
group_by(Grant.Searched) %>%
summarise(count = n(), numberpaper = sum(Number.of.Papers),
prop = count/sum(count), prop.count = numberpaper/sum(Number.of.Papers))
View(df)
# using diamonds dataset for illustration
df <- grants %>%
group_by(Grant.Searched) %>%
summarise(count = n(), numberpaper = sum(Number.of.Papers))
View(df)
ggplot(df,
aes(x = Grant.Searched, y = numberpaper, width = count, fill = count)) +
geom_bar(stat = "identity", position = "fill", colour = "black") +
# geom_text(aes(label = scales::percent(prop)), position = position_stack(vjust = 0.5)) + # if labels are desired
facet_grid(~cut, scales = "free_x", space = "free_x") +
scale_fill_brewer(palette = "RdYlGn") +
# theme(panel.spacing.x = unit(0, "npc")) + # if no spacing preferred between bars
theme_void()
